{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nexport class FormComponent {\n  constructor(fb) {\n    this.fb = fb;\n    this.myform = new FormGroup({});\n    this.submitted = false;\n    this.todos = [];\n  }\n  identityRevealedValidator(passwords) {\n    return control => {\n      const password = control.parent?.get(passwords)?.value;\n      const confirmPassword = control?.value;\n      if (password !== confirmPassword) {\n        return {\n          passwordMismatch: true\n        };\n      }\n      return null;\n    };\n  }\n  createForm() {\n    this.myform = this.fb.group({\n      title: new FormControl('', [Validators.required]),\n      firstName: new FormControl('', [Validators.required, Validators.minLength(8)]),\n      lastName: new FormControl('', [Validators.required, Validators.minLength(8)]),\n      dob: new FormControl('', [Validators.required]),\n      email: new FormControl(\"\", [Validators.required, Validators.minLength(8)]),\n      password: new FormControl(\"\", [Validators.required, Validators.minLength(8)]),\n      confirmPassword: new FormControl(\"\", [Validators.required, this.identityRevealedValidator('password')]),\n      acceptTerms: new FormControl(\"\", [Validators.required])\n    });\n  }\n  ngOnInit() {\n    this.createForm();\n  }\n  get title() {\n    return this.myform.get('title');\n  }\n  get firstName() {\n    return this.myform.get('firstName');\n  }\n  get lastName() {\n    return this.myform.get('lastName');\n  }\n  get dob() {\n    return this.myform.get('dob');\n  }\n  get email() {\n    return this.myform.get('email');\n  }\n  get password() {\n    return this.myform.get('password');\n  }\n  get confirmPassword() {\n    return this.myform.get('confirmPassword');\n  }\n  get acceptTerms() {\n    return this.myform.get('acceptTerms');\n  }\n  addTodo() {\n    const index = this.todos.findIndex(t => t.title === this.myform.value.title);\n    if (index !== -1) {\n      var newTodo = {\n        title: this.myform.value.title,\n        firstName: this.myform.value.firstName,\n        lastName: this.myform.value.lastName,\n        dob: this.myform.value.dob,\n        email: this.myform.value.email,\n        password: this.myform.value.password,\n        confirmPassword: this.myform.value.confirmPassword\n      };\n      this.todos[index] = newTodo;\n    } else {\n      var newTodo = {\n        title: this.myform.value.title,\n        firstName: this.myform.value.firstName,\n        lastName: this.myform.value.lastName,\n        dob: this.myform.value.dob,\n        email: this.myform.value.email,\n        password: this.myform.value.password,\n        confirmPassword: this.myform.value.confirmPassword\n      };\n      this.todos.push(newTodo);\n    }\n    this.myform.reset();\n    this.submitted = false;\n  }\n  onSubmit() {\n    debugger;\n    this.submitted = true;\n    if (this.myform.valid) {\n      //   const formData = this.myform.value;\n      this.addTodo();\n    }\n  }\n}\nFormComponent.ɵfac = function FormComponent_Factory(t) {\n  return new (t || FormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FormComponent,\n  selectors: [[\"app-form\"]],\n  decls: 2,\n  vars: 0,\n  template: function FormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"form works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["FormGroup","FormControl","Validators","FormComponent","constructor","fb","myform","submitted","todos","identityRevealedValidator","passwords","control","password","parent","get","value","confirmPassword","passwordMismatch","createForm","group","title","required","firstName","minLength","lastName","dob","email","acceptTerms","ngOnInit","addTodo","index","findIndex","t","newTodo","push","reset","onSubmit","valid","i0","ɵɵdirectiveInject","i1","FormBuilder","selectors","decls","vars","template","FormComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["C:\\Users\\Ahmed Ghani\\Todo\\my-angular-app\\src\\app\\form\\form.component.ts","C:\\Users\\Ahmed Ghani\\Todo\\my-angular-app\\src\\app\\form\\form.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators, FormBuilder, ValidationErrors, ValidatorFn, AbstractControl }\n  from '@angular/forms';\n\n@Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.css']\n})\nexport class FormComponent implements OnInit {\n  myform: FormGroup = new FormGroup({});\n  submitted = false;\n  todos = [];\n  constructor(private fb: FormBuilder) { }\n  identityRevealedValidator(passwords: string): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n\n      const password = control.parent?.get(passwords)?.value;\n      const confirmPassword = control?.value;\n\n      if (password !== confirmPassword) {\n        return { passwordMismatch: true };\n      }\n\n      return null;\n    };\n  }\n  createForm() {\n    this.myform = this.fb.group({\n\n      title: new FormControl('', [Validators.required]),\n      firstName: new FormControl('', [Validators.required, Validators.minLength(8)]),\n      lastName: new FormControl('', [Validators.required, Validators.minLength(8)]),\n      dob: new FormControl('', [Validators.required]),\n      email: new FormControl(\"\", [Validators.required, Validators.minLength(8)]),\n      password: new FormControl(\"\", [Validators.required, Validators.minLength(8)]),\n      confirmPassword: new FormControl(\"\", [Validators.required, this.identityRevealedValidator('password')]),\n      acceptTerms: new FormControl(\"\", [Validators.required])\n\n    });\n  }\n\n  \n\n\n  ngOnInit() {\n    this.createForm();\n  }\n  get title(): FormControl {\n\n    return this.myform.get('title') as FormControl\n  }\n  get firstName() {\n    return this.myform.get('firstName') as FormControl\n  }\n  get lastName() {\n    return this.myform.get('lastName') as FormControl\n  }\n  get dob() {\n    return this.myform.get('dob') as FormControl\n  }\n  get email() {\n    return this.myform.get('email') as FormControl\n  }\n  get password() {\n    return this.myform.get('password') as FormControl\n  }\n  get confirmPassword() {\n    return this.myform.get('confirmPassword') as FormControl\n  }\n  get acceptTerms() {\n    return this.myform.get('acceptTerms') as FormControl\n  }\n  addTodo() {\n\n    const index = this.todos.findIndex(t => t.title === this.myform.value.title);\n    if (index !== -1) {\n      var newTodo = {\n        title: this.myform.value.title,\n\n        firstName: this.myform.value.firstName,\n        lastName: this.myform.value.lastName,\n        dob: this.myform.value.dob,\n        email: this.myform.value.email,\n        password: this.myform.value.password,\n        confirmPassword: this.myform.value.confirmPassword\n      };\n      this.todos[index] = newTodo;\n    }\n    else {\n    var newTodo = {\n      title: this.myform.value.title,\n\n      firstName: this.myform.value.firstName,\n      lastName: this.myform.value.lastName,\n      dob: this.myform.value.dob,\n      email: this.myform.value.email,\n      password: this.myform.value.password,\n      confirmPassword: this.myform.value.confirmPassword\n    };\n    this.todos.push(newTodo);\n   \n  }\n  this.myform.reset();\n  this.submitted = false \n\n\n  }\n  onSubmit() {\n    debugger\n    this.submitted = true;\n    if (this.myform.valid) {\n      //   const formData = this.myform.value;\n      this.addTodo();\n     \n    }\n  }\n}\n","<p>form works!</p>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}